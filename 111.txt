using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;
using UpdateLevelByCategory.ViewModel;
using UpdateLevelByCategory.Model;
using System.Linq;
using UpdateLevelByCategory.MVVM;
using UpdateLevelByCategory.View;
using Excel = Microsoft.Office.Interop.Excel;
using System.Globalization;
using Autodesk.Revit.DB.Electrical;

namespace UpdateLevelByCategory.Model
{
    internal class RevitModelClass
    {
        public UIApplication _uiApplication;
        public Application _application;
        public Document _document;
        public readonly UIDocument _uiDocument;
        public IList<Element> collectionElementsId;
        public string messageGroup = "";
        int i = 0;


        

        public bool UpdateLevel(IList<Element> _listElementsSelected)
        {
     

            if (_listElementsSelected == null)
            {
                TaskDialog.Show("Error", "Count elements = 0");
                return false;
            }



            else
            {
                foreach (Element el in _listElementsSelected)
                {
                    ElementId levelBaseElement = el.LevelId;

                    Level newLevel = null; ;

                    string name_Element = el.Name;//Для отладки

                    // if (el.GroupId == null)
                    //{
                    //Если элемент семейство
                    if (el.GroupId.IntegerValue != -1) //Кроме групп
                    {
                        var NameGroup = _document.GetElement(el.GroupId).Name;

                        if (!messageGroup.Contains(NameGroup))
                        {
                            messageGroup += "\u0022" + NameGroup + "\u0022" + "\n";

                        }
                    }

                    if (el.GroupId.IntegerValue == -1) //Кроме групп
                    {

                        try
                        {
                         

                                Parameter ParameterElementLevel = el.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM); //Параметр уровня
                                string nameParameterLevel = ParameterElementLevel.Definition.Name; //Для отладки
                                Parameter paramOffSet = el.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM);//Параметр привязки


                                LocationPoint LocalPointElement = el.Location as LocationPoint;

                                BoundingBoxXYZ bb = el.get_BoundingBox(_document.ActiveView);

                                double value_Z_Element = LocalPointElement.Point.Z; //Z элемента 


                                double value_Z_ElementBoundingBox = bb.Min.Z;
                                Level levelSameMinBB = _document.GetElement(el.LevelId) as Level;

                            if (el is FamilyInstance fi)

                            {

                                if (paramOffSet.AsDouble() == 0 )

                                {
                                    if (!fi.CanFlipWorkPlane)
                                    {
                                        newLevel = levelSameMinBB;
                                    }
                                    else
                                    {

                                        if (!fi.HasSpatialElementCalculationPoint)
                                        {
                                            newLevel = GetNearestLevelToElements(value_Z_ElementBoundingBox); //Для минимальной Z семейства, независимо от самого семейства
                                        }
                                        else
                                        {
                                            newLevel = GetNearestLevelToElements(fi.GetSpatialElementCalculationPoint().Z);// Для семейства с точкой расчета площади

                                        }

                                    }

                                }


                                else
                                {
                                    if (!fi.HasSpatialElementCalculationPoint)
                                    {
                                        newLevel = GetNearestLevelToElements(value_Z_ElementBoundingBox); //Для минимальной Z семейства, независимо от самого семейства
                                    }
                                    else
                                    {
                                        newLevel = GetNearestLevelToElements(fi.GetSpatialElementCalculationPoint().Z); //Для минимальной Z семейства, независимо от самого семейства

                                    }
                                }

                                if (newLevel == null )
                                {
                                    newLevel = GetMinimalLevel();
                                }

                                Parameter parameterlElement = el.LookupParameter("ADSK_Этаж");
                                Parameter parameterLevel = newLevel.LookupParameter("ADSK_Этаж");
                                if (parameterLevel == null)
                                {

                                    TaskDialog.Show("Error", $"Level - \u0022{newLevel.Name}\u0022 does not have the value \u0022ADSK_Этаж\u0022");
                                    return false;


                                }
                                string nameParLev = parameterLevel.AsString();

                                //Установить ADSK_Этаж
                                if (parameterlElement != null && parameterLevel != null)
                                {

                                   // SetParameterAdskLevelSystem(parameterlElement, nameParLev);
                                    SetParameterAdskLevelFamily(parameterlElement, nameParLev, fi);
                                }

                                using (Transaction t = new Transaction(_document, "Transaction with FamilyInstance"))
                                {
                                    t.Start();

                                    //Если уровни не совпали
                                    if (newLevel.Id != levelBaseElement)
                                    {

                                        if (!fi.HasSpatialElementCalculationPoint) // Если семейство не имеет точку площади расчета
                                        {
                                          

                                            string NameLevel = newLevel.Name;//Для отладки
                                            ParameterElementLevel.Set(newLevel.Id);//Задает новый уровень
                                            paramOffSet.Set(value_Z_Element - newLevel.Elevation);//Задает новое смещение
                                        }
                                        else
                                        {
                                            string NameLevel = newLevel.Name;//Для отладки
                                            ParameterElementLevel.Set(newLevel.Id);//Задает новый уровень
                                            paramOffSet.Set(value_Z_ElementBoundingBox - newLevel.Elevation);//Задает новое смещение

                                        }

                                    }


                                    t.Commit();

                                }

                            }
                        }

                        //Если элемент системный
                        catch
                        {
                            Parameter ParameterElementLevel = el.get_Parameter(BuiltInParameter.RBS_START_LEVEL_PARAM);
                            Parameter paramOffSetStart = el.get_Parameter(BuiltInParameter.RBS_OFFSET_PARAM);//Параметр привязки
                            Element elForLevel = el;

                            //double value_Z_ElementBoundingBox = el.get_BoundingBox(_document.ActiveView).Min.Z;

                            MEPCurve mEPCurve = el as MEPCurve;

                            //Если элемент является MEPCurve
                            if (mEPCurve != null)
                            {
                                LocationCurve lc = mEPCurve.Location as LocationCurve;

                                double value_Z_Element = GetMinPointCurve(lc);

                                newLevel = GetNearestLevelToElements(value_Z_Element); //value_Z_ElementBoundingBox
                                if (newLevel == null)
                                {
                                    newLevel = GetMinimalLevel();
                                }

                                Parameter parameterlElement = elForLevel.LookupParameter("ADSK_Этаж");
                                Parameter parameterLevel = newLevel.LookupParameter("ADSK_Этаж");

                                if (parameterLevel == null)
                                {

                                    TaskDialog.Show("Error", $"Level - \u0022{newLevel.Name}\u0022 does not have the value \u0022ADSK_Этаж\u0022");
                                    return false;
                                  

                                }

                                string nameParLev = parameterLevel.AsString();


                                //Установить ADSK_Этаж
                                if (parameterlElement != null && parameterLevel != null)
                                {

                                    SetParameterAdskLevelSystem(parameterlElement, nameParLev);
                                }

                                using (Transaction t = new Transaction(_document, "Transaction with System FamilyInstance"))
                                {
                                    t.Start();

                                    //Если уровни не совпали

                                    if (newLevel.Id != levelBaseElement)
                                    {
                                        string NameLevel = newLevel.Name;//Для отладки

                                        ParameterElementLevel.Set(newLevel.Id);//Задает новый уровень

                                    }

                                    t.Commit();

                                }

                            }
                        }


                        i++;
                    }

                }//end foreach
                if (!string.IsNullOrEmpty(messageGroup))
                {
                    TaskDialog.Show("Missed Groups", "Missed groups:\n" + messageGroup + "\n");
                }
                else
                {
                    TaskDialog.Show("Result", i + " element(s) were analyzed");
                }
                return true;
            }

        }



        public void SetParameterAdskLevelFamily(Parameter _parElemnt, string _parLevel, FamilyInstance _fi)
        {
            using (Transaction t = new Transaction(_document, "SetLevel"))
            {
                t.Start();
                var listNestedFamilies = _fi.GetSubComponentIds().ToList();
                if (listNestedFamilies.Count != 0)
                {
                    foreach (var sbel in listNestedFamilies)
                        {
                        var elSub = _document.GetElement(sbel);
                        string nameSubEl = elSub.Name;
                        Parameter _parlvl = elSub.LookupParameter("ADSK_Этаж");

                        if (_parlvl != null)
                        {
                            _parlvl.Set(_parLevel);
                        }
                    }
                    _parElemnt.Set(_parLevel);

                }


               

                else
                {
                    _parElemnt.Set(_parLevel);

                }
                t.Commit();

            }
        }


        public void SetParameterAdskLevelSystem(Parameter _parElemnt, string _parLevel)
        {
            using (Transaction t = new Transaction(_document, "SetLevel"))
            {
                t.Start();


                    _parElemnt.Set(_parLevel);

                t.Commit();

            }
        }


        double GetMinPointCurve(LocationCurve _lc)
        {

            double Zpt1 = _lc.Curve.GetEndPoint(0).Z;
            double mpt1 = PoundsToM(Zpt1);
            double Zpt2 = _lc.Curve.GetEndPoint(1).Z;
            double mpt2 = PoundsToM(Zpt2);

            if (Zpt2 > Zpt1)
            {
                return Zpt1;
            }

            else
            {

                return Zpt2;
            }

        }

        public double PoundsToM(double value)
        {
            return Math.Round(UnitUtils.ConvertFromInternalUnits(value, DisplayUnitType.DUT_MILLIMETERS), 3);
        }


        public double GetMinPointofCurve(LocationCurve _lCurve)
        {
            List<double> MinPointofCurve = new List<double>();
            for (int i = 0; i <= 1; i++)
            {
                MinPointofCurve.Add(_lCurve.Curve.GetEndPoint(i).Z);

            }
            return MinPointofCurve.Min();
        }
        //Нахождение минимального уровня в проекте
        public Level GetMinimalLevel()
        {

            //Создание словаря для поиска минмальной высоты уровня Dictionary<уровень, разница между Z элемента и Z уровня>
            Dictionary<Level, double> PointsLevels = new Dictionary<Level, double>(); //Создание словаря для поиска уровня с минимальной высотой

            var colLevel = new FilteredElementCollector(_document).OfClass(typeof(Level)).Cast<Level>(); //Коллекция всех уровней в проекте
            foreach (Level lv in colLevel)
            {
                double minZ = lv.ProjectElevation;
                PointsLevels.Add(lv, minZ);

            }
            //Нахождение ближайшего уровня к элементу
            Level minLEvel = PointsLevels.Where(e => e.Value == PointsLevels.Min(e2 => e2.Value)).FirstOrDefault().Key;

           // Level minLEvel = colLevel.Where(g => g.ProjectElevation == colLevel.Min(f => f.ProjectElevation)).First();

            return minLEvel;
        }

        //Нахождение ближайшего уровня к элементу
        public Level GetNearestLevelToElements(double _valueZElement)
        {
            //Создание словаря для поиска минмальной высоты уровня Dictionary<уровень, разница между Z элемента и Z уровня>
            Dictionary<Level, double> PointsLevels = new Dictionary<Level, double>(); //Создание словаря для поиска уровня с минимальной высотой

            var levels = new FilteredElementCollector(_document).OfClass(typeof(Level)).Cast<Level>(); //Коллекция всех уровней в проекте
            foreach (Level lv in levels)
            {
                string aaa = lv.Name;

                double value_Z_Level = lv.ProjectElevation;
                if (value_Z_Level < _valueZElement)
                {
                    double dif = _valueZElement - value_Z_Level;
                    PointsLevels.Add(lv, dif);
                }

            }
            //Нахождение ближайшего уровня к элементу
            Level newLevel = PointsLevels.Where(e => e.Value == PointsLevels.Min(e2 => e2.Value)).FirstOrDefault().Key;

            return newLevel;
        }
        public string GetParameterValue(Parameter parameter)
        {
            string s;
            switch (parameter.StorageType)
            {
                case StorageType.Double:

                    s = RealString(parameter.AsDouble());
                    break;

                case StorageType.Integer:
                    s = parameter.AsInteger().ToString();
                    break;

                case StorageType.String:
                    s = parameter.AsString();
                    break;

                case StorageType.ElementId:
                    s = parameter.AsElementId().IntegerValue.ToString();
                    break;

                case StorageType.None:
                    s = "";
                    break;

                default:
                    s = "0.0";
                    break;
            }
            return s;
        }

        public static string RealString(double a)
        {
            return a.ToString();
        }

        public static double ConvertToDouble(string Value)
        {
            if (Value == null)
            {
                return 0;
            }
            else
            {
                double OutVal;
                double.TryParse(Value, out OutVal);

                if (double.IsNaN(OutVal) || double.IsInfinity(OutVal))
                {
                    return 0;
                }
                return OutVal;
            }
        }

        public RevitModelClass(UIApplication uiapp)
        {
            _uiApplication = uiapp;
            _application = _uiApplication.Application;
            _uiDocument = _uiApplication.ActiveUIDocument;
            _document = _uiDocument.Document;

        }


        public bool GetRadioButton(BuiltInCategory bt)
        {

            return UpdateLevel(new FilteredElementCollector(_document).OfCategory(bt).ToList());
        }

        public static IList<Element> GetSelectedElements(UIDocument _uid)
        {
            try
            {
                var collector = _uid.Selection.PickElementsByRectangle("Select by rectangle");

                return collector;

            }


            catch
            {
                TaskDialog.Show("Revit", "You haven't selected any elements.");
                return null;
            }
        }

        public static ObservableCollection<CollectionClass> GetParametersofFamily(Document doc, string namefam)
        {
            ObservableCollection<CollectionClass> parametersNames = new ObservableCollection<CollectionClass>();
            try
            {
                var boxes = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_GenericModel).OfClass(typeof(FamilyInstance)).Cast<FamilyInstance>()
                   .Where(item => item.Symbol.FamilyName.Contains(namefam));
                FamilyInstance famInstance = boxes.FirstOrDefault();
                foreach (Parameter p in famInstance.Parameters)
                {
                    if (!p.IsReadOnly && p.StorageType == StorageType.String)

                        parametersNames.Add(new CollectionClass() { NameCategory = p.Definition.Name });
                }
                return parametersNames;
            }
            catch (Exception exception)
            {
                TaskDialog.Show("Revit", exception.Message);
                return null;
            }
        }

        //Ungroup all Groups in project
        public void UnGroupAll()
        {

            using (Transaction t = new Transaction(_document, "Ungroup All Groups"))
            {
                t.Start();

                var allGroups = new FilteredElementCollector(_document).OfClass(typeof(Group)).Cast<Group>();
                foreach (Group  g in allGroups)
                {

                    g.UngroupMembers();
                }
                   
           
                t.Commit();
            }
        }



    }
}
